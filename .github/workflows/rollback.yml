name: 🔄 Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      rollback_type:
        description: 'Type of rollback'
        required: true
        default: 'previous'
        type: choice
        options:
        - previous
        - specific_commit
        - docker_restart
      commit_hash:
        description: 'Specific commit hash (only for specific_commit)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

jobs:
  rollback:
    name: 🔄 Rollback to Previous Version
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history for rollback

      # ——— 1. Setup AWS and get server IP ———————————————————————————————————————————
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Create terraform.tfvars
        run: |
          cd terraform
          cat > terraform.tfvars << EOF
          ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
          db_password = "${{ secrets.DB_PASSWORD }}"
          jwt_secret = "${{ secrets.JWT_SECRET }}"
          aws_region = "eu-west-1"
          project_name = "ecommerce-app"
          environment = "production"
          domain_name = "glamprinakis.com"
          instance_type = "t3.medium"
          root_volume_size = 20
          ssh_allowed_ips = ["0.0.0.0/0"]
          backup_retention_days = 7
          tags = {
            Owner       = "Georgios Lamprinakis"
            Project     = "E-commerce Portfolio"
            Environment = "Production"
            DeployedBy  = "GitHub Actions Rollback"
          }
          EOF

      - name: Get server IP from Terraform
        id: terraform
        run: |
          cd terraform
          terraform init
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "null" ]; then
            echo "❌ Could not get instance IP from Terraform"
            exit 1
          fi
          echo "🎯 Found server IP: $INSTANCE_IP"
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      # ——— 2. Setup SSH ———————————————————————————————————————————
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Add EC2 to known_hosts
        run: |
          ssh-keyscan -H "${{ steps.terraform.outputs.instance_ip }}" >> ~/.ssh/known_hosts

      # ——— 3. Determine rollback target ———————————————————————————————————————————
      - name: Determine rollback target
        id: rollback_target
        run: |
          if [ "${{ github.event.inputs.rollback_type }}" = "specific_commit" ]; then
            TARGET_COMMIT="${{ github.event.inputs.commit_hash }}"
          elif [ "${{ github.event.inputs.rollback_type }}" = "previous" ]; then
            TARGET_COMMIT=$(git log --oneline -n 2 | tail -1 | cut -d' ' -f1)
          else
            TARGET_COMMIT="current"
          fi
          
          echo "target_commit=$TARGET_COMMIT" >> $GITHUB_OUTPUT
          echo "🎯 Rollback target: $TARGET_COMMIT"

      # ——— 4. Perform rollback ———————————————————————————————————————————
      - name: Execute Rollback
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=yes \
            ubuntu@${{ steps.terraform.outputs.instance_ip }} << EOF
            
            set -e
            cd ~/Web3

            echo "🔄 STARTING ROLLBACK"
            echo "Reason: ${{ github.event.inputs.reason }}"
            echo "Type: ${{ github.event.inputs.rollback_type }}"
            echo "Target: ${{ steps.rollback_target.outputs.target_commit }}"
            echo "Started by: ${{ github.actor }}"
            echo "Time: \$(date)"
            echo ""

            # Backup current state before rollback
            echo "💾 Creating backup of current state..."
            docker compose -f docker-compose.prod.yml logs --no-color > /tmp/app-logs-before-rollback.log
            
            if [ "${{ github.event.inputs.rollback_type }}" = "docker_restart" ]; then
              echo "🔄 Performing Docker restart rollback..."
              docker compose -f docker-compose.prod.yml down
              docker compose -f docker-compose.prod.yml up -d
              
            else
              echo "🔄 Performing Git rollback..."
              
              # Fetch latest changes
              git fetch --all
              
              # Store current commit for potential restore
              CURRENT_COMMIT=\$(git rev-parse HEAD)
              echo "Current commit before rollback: \$CURRENT_COMMIT" > /tmp/rollback-info.txt
              
              # Perform rollback
              if [ "${{ steps.rollback_target.outputs.target_commit }}" != "current" ]; then
                echo "Rolling back to commit: ${{ steps.rollback_target.outputs.target_commit }}"
                git reset --hard ${{ steps.rollback_target.outputs.target_commit }}
              fi
              
              # Rebuild and restart containers
              echo "🧱 Rebuilding application with rollback code..."
              docker compose -f docker-compose.prod.yml down
              docker compose -f docker-compose.prod.yml up -d --build --force-recreate
            fi

            # Wait and test
            echo "⏳ Waiting for application to start..."
            sleep 10

            # Health check
            echo "🔍 Performing health check..."
            if curl -sf http://localhost/api/health; then
              echo "✅ Rollback successful! Application is healthy."
              
              # Clean up old images if git rollback
              if [ "${{ github.event.inputs.rollback_type }}" != "docker_restart" ]; then
                echo "🧹 Cleaning up old Docker images..."
                docker image prune -f
              fi
              
            else
              echo "❌ Rollback failed! Application health check failed."
              echo "📋 Recent logs:"
              docker compose -f docker-compose.prod.yml logs --tail=20
              exit 1
            fi

            echo ""
            echo "🎉 ROLLBACK COMPLETED SUCCESSFULLY"
            echo "Application rolled back at: \$(date)"
            echo "Final commit: \$(git rev-parse HEAD)"
            echo "Docker status:"
            docker compose -f docker-compose.prod.yml ps
          EOF

      # ——— 5. Notification ———————————————————————————————————————————
      - name: Rollback Success Notification
        if: success()
        run: |
          echo "✅ Rollback completed successfully!"
          echo "Server: ${{ steps.terraform.outputs.instance_ip }}"
          echo "Type: ${{ github.event.inputs.rollback_type }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Executed by: ${{ github.actor }}"

      - name: Rollback Failure Notification
        if: failure()
        run: |
          echo "❌ Rollback failed!"
          echo "Server: ${{ steps.terraform.outputs.instance_ip }}"
          echo "Type: ${{ github.event.inputs.rollback_type }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Executed by: ${{ github.actor }}"
          echo ""
          echo "⚠️  Manual intervention may be required!"
