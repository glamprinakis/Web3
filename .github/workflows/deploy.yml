name: 🚀 CI & Deploy to EC2 (DISABLED)

# DISABLED: Using deploy-terraform.yml instead
# on:
#   push:
#     branches: [ main ]

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  # ─── 1) Run your tests ─────────────────────────────────────────────────────
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: [node, react]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with: { node-version: '20' }

      - name: Install & test `${{ matrix.dir }}`
        working-directory: ${{ matrix.dir }}
        run: |
          npm install
          npm test

  # ─── 2) Deploy only if tests pass ─────────────────────────────────────────
  deploy:
    name: 🚀 Deploy to EC2
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # ——— 2.1 Write the SSH key to disk —————————————————————
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # ——— 2.2 Add your EC2 host to known_hosts —————————————————————
      - name: Add EC2 to known_hosts
        run: |
          ssh-keyscan -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      # ——— 2.3 Deploy your code to EC2 —————————————————————
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=yes \
            ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            
            set -e
            cd ~/Web3

            echo "🔄 Pulling latest code from GitHub..."
            git fetch --all
            git reset --hard origin/main

            echo "🧱 Building full stack (frontend, proxy, backend)..."
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d --build --force-recreate --no-deps

            echo "🧹 Cleaning up old Docker resources..."
            # Remove dangling images (untagged images from previous builds)
            docker image prune -f
            # Remove stopped containers
            docker container prune -f
            # Remove unused networks
            docker network prune -f
            # Remove unused volumes (be careful with this one!)
            docker volume prune -f

            echo "⏳ Waiting for health check..."
            sleep 5
            if ! curl -sf http://localhost/api/health; then
              echo "❌ Health check failed!"
              exit 1
            fi

            echo "✅ Deployment complete and healthy!"
            echo "📊 Docker space usage after cleanup:"
            docker system df
            
            # Send success notification (optional)
            echo "🎉 Deployment successful at $(date)"
          EOF

      # ——— 2.4 Notify on failure —————————————————————
      - name: Notify on deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check the logs above for details."
          # You could add Slack/Discord webhook here later