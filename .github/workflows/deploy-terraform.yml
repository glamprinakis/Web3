name: 🚀 CI & Deploy with Dynamic Terraform Outputs

on:
  push:
    branches: [ main ]

jobs:
  # ─── 1) Run your tests ─────────────────────────────────────────────────────
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: [node, react]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with: { node-version: '20' }

      - name: Install & test `${{ matrix.dir }}`
        working-directory: ${{ matrix.dir }}
        run: |
          npm install
          npm test

  # ─── 2) Deploy to Terraform-managed infrastructure ─────────────────────────────────────────
  deploy:
    name: 🚀 Deploy to Terraform EC2
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # ——— 2.1 Configure AWS credentials ———————————————————————————————————————————
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # ——— 2.2 Get server IP from AWS (dynamic discovery) ———————————————————————————————————————————
      - name: Get server IP from AWS
        id: terraform
        run: |
          # Find EC2 instance by tags (created by Terraform)
          INSTANCE_IP=$(aws ec2 describe-instances \
            --region eu-west-1 \
            --filters \
              "Name=tag:Project,Values=ecommerce-app" \
              "Name=tag:Environment,Values=production" \
              "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "null" ] || [ "$INSTANCE_IP" = "None" ]; then
            echo "❌ Could not find running EC2 instance with the right tags"
            echo "Looking for Project=ecommerce-app, Environment=production"
            exit 1
          fi
          
          echo "🎯 Found server IP: $INSTANCE_IP"
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      # ——— 2.3 Install SSH key ———————————————————————————————————————————
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # ——— 2.4 Add EC2 to known_hosts ———————————————————————————————————————————
      - name: Add EC2 to known_hosts
        run: |
          # Try up to 5 times with increasing delays
          for i in $(seq 1 5); do
            echo "Attempt $i to get host key..."
            if ssh-keyscan -H "${{ steps.terraform.outputs.instance_ip }}" >> ~/.ssh/known_hosts; then
              echo "✅ Successfully added host key"
              exit 0
            fi
            sleep $((i * 5))  # Wait 5, 10, 15, 20, 25 seconds between retries
          done
          echo "❌ Failed to get host key after 5 attempts"
          exit 1

      # ——— 2.5 Deploy to Terraform-managed EC2 ———————————————————————————————————————————
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=yes \
            ubuntu@${{ steps.terraform.outputs.instance_ip }} << 'EOF'
            
            set -e
            cd ~/Web3

            echo "🔄 Pulling latest code from GitHub..."
            git fetch --all
            git reset --hard origin/main

            echo "🧱 Building full stack (frontend, proxy, backend)..."
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d --build --force-recreate --no-deps

            echo "🧹 Cleaning up old Docker resources..."
            docker image prune -f
            docker container prune -f
            docker network prune -f
            docker volume prune -f

            echo "⏳ Waiting for health check..."
            sleep 5
            if ! curl -sf http://localhost/api/health; then
              echo "❌ Health check failed!"
              exit 1
            fi

            echo "✅ Deployment complete and healthy!"
            echo "📊 Docker space usage after cleanup:"
            docker system df
            
            echo "🎉 Deployment successful at $(date)"
          EOF

      # ——— 2.6 Notify on failure ———————————————————————————————————————————
      - name: Notify on deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check the logs above for details."
