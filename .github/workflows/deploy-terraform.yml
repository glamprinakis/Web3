name: 🚀 CI & Deploy with Dynamic Terraform Outputs

on:
  push:
    branches: [ main ]

jobs:
  # ─── 1) Run your tests ─────────────────────────────────────────────────────
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: [node, react]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with: { node-version: '20' }

      - name: Install & test `${{ matrix.dir }}`
        working-directory: ${{ matrix.dir }}
        run: |
          npm install
          npm test

  # ─── 2) Deploy to Terraform-managed infrastructure ─────────────────────────────────────────
  deploy:
    name: 🚀 Deploy to Terraform EC2
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # ——— 2.1 Configure AWS credentials ———————————————————————————————————————————
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # ——— 2.2 Get server IP from AWS (dynamic discovery) ———————————————————————————————————————————
      - name: Get server IP from AWS
        id: terraform
        run: |
          # Find EC2 instance by tags (created by Terraform)
          INSTANCE_IP=$(aws ec2 describe-instances \
            --region eu-west-1 \
            --filters \
              "Name=tag:Project,Values=ecommerce-app" \
              "Name=tag:Environment,Values=production" \
              "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ -z "$INSTANCE_IP" ] || [ "$INSTANCE_IP" = "null" ] || [ "$INSTANCE_IP" = "None" ]; then
            echo "❌ Could not find running EC2 instance with the right tags"
            echo "Looking for Project=ecommerce-app, Environment=production"
            exit 1
          fi
          
          echo "🎯 Found server IP: $INSTANCE_IP"
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      # ——— 2.3 Install SSH key ———————————————————————————————————————————
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # ——— 2.4 Add EC2 to known_hosts ———————————————————————————————————————————
      - name: Add EC2 to known_hosts
        run: |
          # First, let's verify our IP and SSH key setup
          echo "🔍 DEBUG: Verifying setup..."
          echo "- Instance IP: ${{ steps.terraform.outputs.instance_ip }}"
          echo "- SSH key permissions:"
          ls -l ~/.ssh/deploy_key
          echo "- SSH key content check (first line only):"
          head -n1 ~/.ssh/deploy_key
          
          echo "🔍 DEBUG: Testing basic connectivity..."
          ping -c 1 ${{ steps.terraform.outputs.instance_ip }} || echo "Ping failed (expected if ICMP is blocked)"
          
          # Try to connect to SSH port
          echo "Waiting for SSH port to be available..."
          for i in $(seq 1 6); do
            echo "🔄 Attempt $i to connect to SSH port..."
            if timeout 5 nc -zv ${{ steps.terraform.outputs.instance_ip }} 22 2>&1; then
              echo "✅ SSH port is open"
              echo "🔍 DEBUG: Testing SSH connection directly..."
              ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=5 ubuntu@${{ steps.terraform.outputs.instance_ip }} echo "Test connection" || echo "Direct SSH test failed"
              
              echo "🔍 DEBUG: Attempting to get host key..."
              if ssh-keyscan -H -T 5 "${{ steps.terraform.outputs.instance_ip }}" 2>ssh-keyscan.err >ssh-keyscan.out; then
                echo "✅ ssh-keyscan succeeded"
                echo "Output from ssh-keyscan:"
                cat ssh-keyscan.out
                cat ssh-keyscan.out >> ~/.ssh/known_hosts
                if grep -q "${{ steps.terraform.outputs.instance_ip }}" ~/.ssh/known_hosts; then
                  echo "✅ Host key successfully added to known_hosts"
                  exit 0
                else
                  echo "❌ Host key was not properly added to known_hosts"
                fi
              else
                echo "❌ ssh-keyscan failed"
                echo "ssh-keyscan error output:"
                cat ssh-keyscan.err
              fi
            else
              echo "❌ SSH port not responding on attempt $i"
            fi
            echo "Waiting 10 seconds before next attempt..."
            sleep 10
          done
          
          echo "❌ Failed to establish SSH connection after all attempts"
          echo "Final debug information:"
          echo "1. Current network status:"
          netstat -an | grep ${{ steps.terraform.outputs.instance_ip }} || true
          echo "2. SSH configuration:"
          ls -la ~/.ssh/
          echo "3. Known hosts content:"
          cat ~/.ssh/known_hosts
          echo "4. Instance status from AWS:"
          aws ec2 describe-instances --instance-ids $(aws ec2 describe-instances --filters "Name=ip-address,Values=${{ steps.terraform.outputs.instance_ip }}" --query "Reservations[].Instances[].InstanceId" --output text) --query "Reservations[].Instances[].[State.Name,NetworkInterfaces[].Status[]]" --output text
          exit 1

      # ——— 2.5 Deploy to Terraform-managed EC2 ———————————————————————————————————————————
      - name: Deploy to EC2
        run: |
          echo "🔍 DEBUG: Attempting SSH connection..."
          echo "1. Verify SSH key:"
          ls -l ~/.ssh/deploy_key
          echo "2. Known hosts content:"
          cat ~/.ssh/known_hosts
          echo "3. Testing SSH connection with verbose output:"
          ssh -v -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -o ConnectTimeout=10 \
            ubuntu@${{ steps.terraform.outputs.instance_ip }} << 'EOF'
            
            set -e
            cd ~/Web3

            echo "🔄 Pulling latest code from GitHub..."
            git fetch --all
            git reset --hard origin/main

            echo "🧱 Building full stack (frontend, proxy, backend)..."
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d --build --force-recreate --no-deps

            echo "🧹 Cleaning up old Docker resources..."
            docker image prune -f
            docker container prune -f
            docker network prune -f
            docker volume prune -f

            echo "⏳ Waiting for health check..."
            sleep 5
            if ! curl -sf http://localhost/api/health; then
              echo "❌ Health check failed!"
              exit 1
            fi

            echo "✅ Deployment complete and healthy!"
            echo "📊 Docker space usage after cleanup:"
            docker system df
            
            echo "🎉 Deployment successful at $(date)"
          EOF

      # ——— 2.6 Notify on failure ———————————————————————————————————————————
      - name: Notify on deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check the logs above for details."
